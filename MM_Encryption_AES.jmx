<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">wsf.cdyne.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Host of Webservice</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main_Thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1375525852000</longProp>
        <longProp name="ThreadGroup.end_time">1375525852000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Soap Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;moduleName&quot;:&quot;LOCALBANKTRANSFER&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${IP}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/demo/testingencryption/pttesting</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="apiKey" elementType="Header">
                <stringProp name="Header.name">apiKey</stringProp>
                <stringProp name="Header.value">123345566667</stringProp>
              </elementProp>
              <elementProp name="apiSecret" elementType="Header">
                <stringProp name="Header.name">apiSecret</stringProp>
                <stringProp name="Header.value">612da21c4b-677a-4ff6-b3fe-3210848b7009</stringProp>
              </elementProp>
              <elementProp name="appLanguage" elementType="Header">
                <stringProp name="Header.name">appLanguage</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="channel" elementType="Header">
                <stringProp name="Header.name">channel</stringProp>
                <stringProp name="Header.value">App</stringProp>
              </elementProp>
              <elementProp name="dataType" elementType="Header">
                <stringProp name="Header.name">dataType</stringProp>
                <stringProp name="Header.value">jsonp</stringProp>
              </elementProp>
              <elementProp name="deviceId" elementType="Header">
                <stringProp name="Header.name">deviceId</stringProp>
                <stringProp name="Header.value">61ac631ebd7226cf</stringProp>
              </elementProp>
              <elementProp name="userSubType" elementType="Header">
                <stringProp name="Header.name">userSubType</stringProp>
                <stringProp name="Header.value">SELF</stringProp>
              </elementProp>
              <elementProp name="userType" elementType="Header">
                <stringProp name="Header.name">userType</stringProp>
                <stringProp name="Header.value">CUSTOMER</stringProp>
              </elementProp>
              <elementProp name="Environment" elementType="Header">
                <stringProp name="Header.name">Environment</stringProp>
                <stringProp name="Header.value">FT2</stringProp>
              </elementProp>
              <elementProp name="checksum" elementType="Header">
                <stringProp name="Header.name">checksum</stringProp>
                <stringProp name="Header.value">${checksum}</stringProp>
              </elementProp>
              <elementProp name="appVersion" elementType="Header">
                <stringProp name="Header.name">appVersion</stringProp>
                <stringProp name="Header.value">1.1.40middleware</stringProp>
              </elementProp>
              <elementProp name="deviceType" elementType="Header">
                <stringProp name="Header.name">deviceType</stringProp>
                <stringProp name="Header.value">android</stringProp>
              </elementProp>
              <elementProp name="reqId" elementType="Header">
                <stringProp name="Header.name">reqId</stringProp>
                <stringProp name="Header.value">5228935317</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.security.MessageDigest
import java.nio.charset.StandardCharsets
import java.util.Base64
import org.apache.commons.codec.digest.DigestUtils

def md5 = vars.get(&quot;Channel&quot; + vars.get(&quot;channel&quot;)).toString() // get values from channel and pass to generate main key with crypto lib
def initVector = &quot;YOURIV_values&quot; // IV value
def requestBody = sampler.getArguments().getArgument(0).getValue()
//def mainKey = calculateMD5(md5) // KEY will generate from the channel values
//def mainKey = &quot;d41d8cd98f00b204e9800998ecf8427e&quot; // Pass the encryption cipher KEY
def mainKey = &quot;MAIN_Key&quot; 

def encrypted = encryptAES(requestBody, mainKey, initVector)
// Generate timestamp and calculate SHA256 hash for checksum values
def time = String.valueOf(new Date().getTime())
def hash = DigestUtils.sha256Hex(requestBody + time)
// Update request body and set checksum in the sampler&apos;s arguments
sampler.getArguments().removeAllArguments()
sampler.addNonEncodedArgument(&quot;&quot;, &quot;{\&quot;request\&quot;:\&quot;&quot; + encrypted + &quot;\&quot;}&quot;, &quot;&quot;)
sampler.getArguments().getArgument(0).setName(&quot;&quot;)
vars.put(&quot;checksum&quot;, time + &quot;=&quot; + hash)
// Function to calculate MD5 and Generate Key from Channel values
def calculateMD5(input) {
    def md = MessageDigest.getInstance(&quot;MD5&quot;)
    md.update(input.getBytes())
    def digest = md.digest()
    def result = new BigInteger(1, digest).toString(16)
    while (result.length() &lt; 32) {
        result = &quot;0&quot; + result
    }
    return result
}
// Function to encrypt using AES
def encryptAES(data, key, initVector) {
    try {
        def keyBytes = key.getBytes(StandardCharsets.UTF_8)
        def ivBytes = initVector.getBytes(StandardCharsets.UTF_8)
        def keySpec = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        def ivSpec = new IvParameterSpec(ivBytes)
        def cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec)
        def encryptedBytes = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8))
        return Base64.getEncoder().encodeToString(encryptedBytes)
    } catch (Exception e) {
        log.error(&quot;Error encrypting data: &quot; + e.getMessage(), e)
        return null
    }
}
/*
// Uncomment the following lines for debugging
 log.info(&quot;Original Request Body: &quot; + requestBody)
 log.info(&quot;Main Key: &quot; + mainKey)
 log.info(&quot;Encrypted Body: &quot; + encrypted)
 log.info(&quot;Timestamp: &quot; + time)
 log.info(&quot;Hash: &quot; + hash) */</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="130046656">&lt;/GetCityForecastByZIPResult&gt;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Verify content in response</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
